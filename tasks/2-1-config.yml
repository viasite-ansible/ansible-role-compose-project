---
- name: "Check if {{ p_root }} exists"
  stat: "path={{ p_root }}"
  register: p_register_p_root
  ignore_errors: True
  tags: [config, git]

- name: "Define p_root_exists"
  set_fact:
    p_root_exists: "{{ p_register_p_root.stat.exists|default(false) }}"

- name: "Create {{ p_root }}"
  file:
    path: "{{ p_root }}"
    state: directory
    owner: "{{ p_user }}"
    group: "{{ p_user_group }}"
  become: yes
  when: not p_root_exists
  tags: [config]

- name: "Check if {{ p_root }} empty"
  command: "find {{ p_root }} -type f -print -quit"
  changed_when: False
  register: p_register_root_files

- name: "Define p_root_empty"
  set_fact:
    p_root_empty: "{{ p_register_root_files.stdout == '' }}"

- name: Clone git to project root
  git:
    repo: "{{ p_git_clone }}"
    dest: "{{ p_root }}"
    version: "{{ p_git_version | default(omit) }}"
  when: "(not p_root_exists or p_root_empty) and p_git_clone is defined and p_git_clone"
  tags: [config, git]

- name: Mkdir config dirs
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    owner: "{{ p_user }}"
    group: "{{ p_user_group }}"
  become: yes
  when: p_compose is defined and p_compose
  with_items:
    - "{{ p_log_root }}"
    #- "{{ p_data }}/nginx/conf.d"
  tags: [config]

- name: Mkdir p_dirs
  file:
    path: "{{ item.path if 'path' in item else item }}"
    state: directory
    recurse: yes
    owner: "{{ item.owner if 'owner' in item else p_user }}"
    group: "{{ item.group if 'group' in item else p_user_group }}"
  become: yes
  with_items:
    - "{{ p_dirs }}"
  tags: [config]

- name: Create p_configs
  copy:
    dest: "{{ p_root }}/{{ item.path }}"
    content: "{{ item.content }}"
    owner: "{{ p_user }}"
    group: "{{ p_user_group }}"
  become: yes
  with_items:
    - "{{ p_configs }}"
  tags: [config, configs, config-docker-compose]

# TODO: mkdir data dir even if not defined in p_dirs
- name: Create data/config.yml from p_config_yml
  copy:
    dest: "{{ p_data }}/config.yml"
    content: "{{ p_config_yml | to_nice_yaml(indent=2) }}"
    owner: "{{ p_user }}"
    group: "{{ p_user_group }}"
  become: yes
  when: p_config_yml
  tags: [config, config-yml, config-docker-compose]

- name: Check .env exists
  stat:
    path: "{{ p_root }}/.env"
  changed_when: False
  register: _p_register_env
  when: p_env is defined
  tags: [ config, docker, config-docker-compose, config-api ]

- name: Create .env
  file:
    path: "{{ p_root }}/.env"
    state: touch
    owner: "{{ p_user }}"
    group: "{{ p_user_group }}"
  when: p_env is defined and not _p_register_env.stat.exists
  register: _p_create_env
  tags: [ config, docker, config-docker-compose, config-api ]

- name: Update .env file
  lineinfile:
    path: "{{ p_root }}/.env"
    regexp: '^{{ item.key }}'
    line: '{{ item.key }}={{ item.value }}'
  become: yes
  with_dict:
    - "{{ p_env }}"
  when: p_env is defined and (_p_register_env.stat.exists or _p_create_env is changed)
  tags: [ config, docker, config-docker-compose, config-api ]

- name: Write status.sh
  template:
    src: status.sh.j2
    dest: "{{ p_root }}/status.sh"
    owner: "{{ p_user }}"
    group: "{{ p_user_group }}"
    mode: "0755"
  when: p_compose is defined or p_status_sh is defined
  tags: [config, config-deploy]

- name: "Write README.md to {{ p_root }}"
  template:
    src: README.md.j2
    dest: "{{ p_root }}/README.md"
    owner: "{{ p_user }}"
    group: "{{ p_user_group }}"
    mode: "0755"
  when: (p_readme is defined and p_readme) or (readme is defined and readme)
  tags: [config, readme]
