---
- name: "Check if {{ p_root }} exists"
  stat: "path={{ p_root }}"
  register: p_register_p_root
  ignore_errors: True
  tags: [config, git]

- debug:
    var: p_register_p_root
  tags: [config, git]

- name: Clone git to project root
  git:
    repo: "{{ p_git_clone }}"
    dest: "{{ p_root }}"
    version: "{{ p_git_version | default(omit) }}"
  when: "{{ not p_register_p_root.stat.exists|default(false) }} and p_git_clone is defined and p_git_clone"
  tags: [config, git]

- name: Mkdir config dirs
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    owner: "{{ p_user }}"
    group: "{{ p_user_group }}"
  become: yes
  when: p_compose is defined and p_compose
  with_items:
    - "{{ p_log_root }}"
    #- "{{ p_data }}/nginx/conf.d"
  tags: [config]

- name: Mkdir p_dirs
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    owner: "{{ p_user }}"
    group: "{{ p_user_group }}"
  become: yes
  with_items:
    - "{{ p_dirs }}"
  tags: [config]

- name: Create p_configs
  copy:
    dest: "{{ p_root }}/{{ item.path }}"
    content: "{{ item.content }}"
    owner: "{{ p_user }}"
    group: "{{ p_user_group }}"
  become: yes
  with_items:
    - "{{ p_configs }}"
  tags: [config]

- name: Check .env exists
  stat:
    path: "{{ p_root }}/.env"
  changed_when: False
  register: _p_register_env
  when: p_env is defined
  tags: [ config, docker, config-docker-compose ]

- name: Create .env
  file:
    path: "{{ p_root }}/.env"
    state: touch
    owner: "{{ p_user }}"
    group: "{{ p_user_group }}"
  when: p_env is defined and not _p_register_env.stat.exists
  register: _p_create_env
  tags: [ config, docker, config-docker-compose ]

- name: Update .env file
  lineinfile:
    path: "{{ p_root }}/.env"
    regexp: '^{{ item.key }}'
    line: '{{ item.key }}={{ item.value }}'
  become: yes
  with_dict:
    - "{{ p_env }}"
  when: p_env is defined and (_p_register_env.stat.exists or _p_create_env is changed)
  tags: [ config, docker, config-docker-compose ]

- name: Write update.sh
  template:
    src: update.sh.j2
    dest: "{{ p_root }}/update.sh"
    owner: "{{ p_user }}"
    group: "{{ p_user_group }}"
    mode: "0755"
  when: p_compose is defined and p_compose
  tags: [config, config-deploy]
